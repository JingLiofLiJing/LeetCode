'''
Given a linked list, remove the n-th node from the end of list and return its head.
Example:
Given linked list: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Follow up:
Could you do this in one pass?
'''
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        if n == 0:
            return head
        before,start,end = None,head,head
        i = 0
        while i < n:
            end = end.next
            i += 1
        while end:
            before = start
            start = start.next
            end = end.next
        #要删的是第一个
        if not before:
            return start.next
        #要删的是最后一个
        if not start.next:
            before.next = None
        #要删的是中间的一个
        else:
            before.next = start.next
        return head
