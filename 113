'''
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def haha(self,node,path,res,target):
        if not node:
            return 
        path.append(node.val)
        if not node.left and not node.right and node.val == target:
            res.append(list(path))
        else:
            self.haha(node.left,path,res,target-node.val)
            self.haha(node.right,path,res,target-node.val)
        path.pop()
            
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        res = []
        self.haha(root,[],res,sum)
        return res
