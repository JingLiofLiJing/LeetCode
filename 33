'''
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
'''
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if nums == [] or nums == None:
            return -1
        start,end = 0,len(nums)-1
        while start < end:
            #判断边界条件
            if nums[start] == target:
                return start
            if nums[end] == target:
                return end 
            mid = (start+end)/2
            if nums[mid] == target:
                return mid
            #如果数字在左半边
            if nums[mid] > nums[start] or nums[mid] > nums[end]:
                #左半边的mid小于肯定在右边
                if nums[mid] < target:
                    start = mid + 1
                #更多情况判断
                elif target > nums[start]:
                    end = mid - 1
                else:
                    start = mid + 1
            #如果数字在右半边
            else:
                #右半边的mid大于肯定在左边
                if nums[mid] > target:
                    end = mid - 1
                elif nums[end] > target:
                    start = mid + 1
                else:
                    end = mid - 1
        if nums[start] == target:
            return start
