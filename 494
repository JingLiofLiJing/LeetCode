You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.
Note:
The length of the given array is positive and will not exceed 20.
The sum of elements in the given array will not exceed 1000.
Your output answer is guaranteed to be fitted in a 32-bit integer.
class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        if not nums:
            return 0
        #a代表为正的数，b代表为负的数，则a+b=sum(nums)，a-b=S，两者加起来一定为偶数，并且和的一半为需要用整数凑到的值
        #所以只要求出有多少种情况可以从所有的正数中凑出和为（a）的情况
        #dp[i] += dp[i-num]当num为0的时候为自乘2，代表了+0和-0两种情况
        msum = sum(nums)
        if (msum+S) & 1 or msum < S or -msum > S:
            return 0
        xx = (msum+S)/2
        dp = [0]*(xx+1)
        dp[0] = 1
        for num in nums:
            for i in range(xx,num-1,-1):
                dp[i] += dp[i-num]
        return dp[-1]
        
