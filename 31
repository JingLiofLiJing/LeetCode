'''
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place and use only constant extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
具体方法为：

a）从后向前查找第一个相邻元素对(i,j)，并且满足A[i] < A[j]。

易知，此时从j到end必然是降序。可以用反证法证明，请自行证明。

b）在[j,end)中寻找一个最小的k使其满足A[i]<A[k]。

由于[j,end)是降序的，所以必然存在一个k满足上面条件；并且可以从后向前查找第一个满足A[i]<A[k]关系的k，此时的k必是待找的k。

c）将i与k交换。

此时，i处变成比i大的最小元素，因为下一个全排列必须是与当前排列按照升序排序相邻的排列，故选择最小的元素替代i。

易知，交换后的[j,end)仍然满足降序排序。因为在(k,end)中必然小于i，在[j,k)中必然大于k，并且大于i。

d）逆置[j,end)

由于此时[j,end)是降序的，故将其逆置。最终获得下一全排序。

注意：如果在步骤a)找不到符合的相邻元素对，即此时i=begin，则说明当前[begin,end)为一个降序顺序，即无下一个全排列，STL的方法是将其逆置成升序。
'''
class Solution(object):
    def swap(self,a,i,j):
        a[i],a[j] = a[j],a[i]
        
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        mlen,j,k = len(nums),0,0
        for i in range(mlen-1,1,-1):
            if nums[i] > nums[i-1]:
                j = i - 1
                break
        for i in range(mlen-1,j,-1):
            if nums[i] > nums[j]:
                k = i
                break
        self.swap(nums,j,k)
        if k != j:
            start = j + 1
        else:
            start = j
        end = mlen - 1
        while start < end:
            self.swap(nums,start,end)
            start += 1
            end -= 1
        print(nums)
        
