'''
There are a total of n courses you have to take, labeled from 0 to n-1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?
Example 1:
Input: 2, [[1,0]] 
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:
Input: 2, [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
'''
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        把点和先后关系表示成有向图，如果存在环则冲突，所以为检测有向图的环的问题。
        首先找到入度为0的点，这个点肯定不是环内的点（环内的点至少有入度），删除此点
        和以该点为起点的边，如果其他点入度变为0则加入删点队列中，最终如果有环，至少2个点
        会还有入度，如果没换，删完每个点的入度都是0
        同时也是BFS解法
        """
        dict = {}
        for i in range(numCourses):
            dict[i] = []
        v = [0 for _ in range(numCourses)]
        for end,start in prerequisites:
            v[end] += 1
            dict[start].append(end)
        mqueue = []
        for i,j in enumerate(v):
            if j == 0:
                mqueue.append(i)
        while mqueue != []:
            vsim = mqueue.pop(0)
            for node in dict[vsim]:
                v[node] -= 1
                if v[node] == 0:
                    mqueue.append(node)
        return max(v) == 0
    
    '''
    DFS方法
    '''
    def helper(self,dict,visit,finish,i):
        if finish[i]:
            return True
        elif visit[i]:
            return False
        else:
            visit[i] = True
        
        for index in dict[i]:
            if not self.helper(dict,visit,finish,index):
                return False
        
        finish[i] = True
        return True
        
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        dict = {}
        for i in range(numCourses):
            dict[i] = []
        #在一组临界点群中判断是否产生了回路
        visit = [0 for _ in range(numCourses)]
        #在dfs迭代函数中迭代后设置为True，是保证加入已经满足要求的树的边也是满足条件的
        #比如 a - b - d
              c /  \ e
        #一开始选的b，则bde在迭代的时候有visit为true，但是finish是在迭代返回的时候赋值，防止再次处理浪费时间
        #后面再选a时，a-b是b为开始处理的树枝边，所以由finish=1可以判断无环
        finish = [0 for _ in range(numCourses)]
        for end,start in prerequisites:
            dict[start].append(end)
        for i in range(numCourses):
            if not self.helper(dict,visit,finish,i):
                return False
        return True
    
        
