'''
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.
字典树即可：每个节点的end表示是否有单词在此处结尾，查找单词到最后一个字母的时候判断end，查找prefix的时候
看是否能到最后一个字母
'''

class node(object):
    def __init__(self,val):
        self.end = False
        self.val = val
        self.children = [None for i in range(26)]

class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = node("root")

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        start = self.root
        for letter in word:
            index = ord(letter) - ord('a')
            if not start.children[index]:
                start.children[index] = node(letter)
            start = start.children[index]
        start.end = True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        start = self.root
        for letter in word:
            index = ord(letter) - ord('a')
            if not start.children[index]:
                return False
            start = start.children[index]
        return start.end

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        start = self.root
        for letter in prefix:
            index = ord(letter) - ord('a')
            if not start.children[index]:
                return False
            start = start.children[index]
        return True
        
