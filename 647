'''
Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:
Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
Example 2:
Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
Note:
The input string length won't exceed 1000.
'''
class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        dp:i,j表示i开始j结尾是否为回文，采用动态规划，计算上三角的1的个数即可
        """
        res = 0
        if s == None or len(s) == 0:
            return 0
        n = len(s)
        dp = [[0]*n for _ in range(n)]
        for i in range(n):
            dp[i][i] = 1
            if i < n-1 and s[i] == s[i+1]:
                dp[i][i+1] = 1
                res += 1
        for i in range(3,n+1):
            for j in range(n-i+1):
                if s[j] == s[j+i-1] and dp[j+1][j+i-2] == 1:
                    dp[j][j+i-1] = 1
                    res += 1
        return res+n
        
