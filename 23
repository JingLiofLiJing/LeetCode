'''
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
'''
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwo(self,l1,l2):
        node,head = None,None
        if not l1:
            return l2
        if not l2:
            return l1
        if l1.val <= l2.val:
            node = l1
            l1 = l1.next
        else:
            node = l2
            l2 = l2.next
        head = node
        while l1 and l2:
            if l1.val <= l2.val:
                node.next = l1
                node = node.next
                l1 = l1.next
            else:
                node.next = l2
                node = node.next
                l2 = l2.next
        if l1:
            node.next = l1
        elif l2:
            node.next = l2
        return head
        
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        用队列实现分而治之算法，没两个两个和，合到最后一个为止
        """
        while lists:
            if len(lists) == 1:
                return lists[0]
            l1 = lists.pop(0)
            l2 = lists.pop(0)
            lists.append(self.mergeTwo(l1,l2))
        return None
