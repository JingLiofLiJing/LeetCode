'''
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3
'''
class Solution(object):
    def fill(self,grid,used,i,j,height,width):
        if i < 0 or i >= height or j < 0 or j >= width or used[i][j] or grid[i][j] == "0":
            return
        used[i][j] = 1
        self.fill(grid,used,i-1,j,height,width)
        self.fill(grid,used,i,j+1,height,width)
        self.fill(grid,used,i+1,j,height,width)
        self.fill(grid,used,i,j-1,height,width)
        
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        uesd记录这个地方是否被查找过，遇到新的陆地则一直找到其岛屿的所有地方进行标记即可
        """
        res = 0
        if grid:
            height,width = len(grid),len(grid[0])
            used = [[0]*width for _ in range(height)]
            for i in range(height):
                for j in range(width):
                    if grid[i][j] == "1" and not used[i][j]:
                        res += 1
                        self.fill(grid,used,i,j,height,width)
        return res
