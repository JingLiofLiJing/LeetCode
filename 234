Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def pipei(self,start,match,end):
        if start == end:
            return start.val == match.val,match.next

        else:
            res,match = self.pipei(start.next,match,end)
            return res and start.val == match.val,match.next
        
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        先找到两个起点，第一个起点递归到最后然后在返回的时候和第二个逐个比较
        或者利用堆栈也行
        """
        if not head or not head.next:
            return True
        prev,mid,pnext = None,head,head
        while pnext and pnext.next:
            prev = mid
            mid = mid.next
            pnext = pnext.next.next
        if pnext:
            mid = mid.next
        return self.pipei(head,mid,prev)[0]
            
