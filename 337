'''
The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
     3
    / \
   2   3
    \   \ 
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:
     3
    / \
   4   5
  / \   \ 
 1   3   1
Maximum amount of money the thief can rob = 4 + 5 = 9.
Credits:
Special thanks to @dietpepsi for adding this problem and creating all test cases.
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def haha(self,root):
        if not root:
            return [0]*2
        left = self.haha(root.left)
        right = self.haha(root.right)
        res = [max(left)+max(right),root.val+left[0]+right[0]]
        return res
        
        
    def rob(self, root):
        """
        :type root: TreeNode
        :rtype: int
        返回的双元素lst第一个代表以当前节点为开头的不包含该节点的最大可偷窃的值，第二个代表偷窃包括根节点在内的最大可能值，
        在root的时候，有两种可能，第一种不包括自己，则就是取子节点的max值，如果包括自己这就是自己的值加上子节点不包括自己的值
        最大化即可
        """
        return max(self.haha(root))
        
        
