'''
Given an integer n, return the number of trailing zeroes in n!.
Note: Your solution should be in logarithmic time complexity.
Credits:
Special thanks to @ts for adding this problem and creating all test cases.
'''
class Solution(object):
    def trailingZeroes(self, n):
        """
        :type n: int
        :rtype: int
        所有出现0的可以分为2和5的乘积，而且2的数量比5多，所以统计5、25、125...的次数就行了，首先统计可以被5的，5,10,15，...相隔5，所以先除以5，然后统计
        25的，25,50，这些的第一个5已经统计过了，所以统计第二个5就行，也就是除以25
        """
        ans = 0
        x = 5
        while n >= x:
            ans += n / x
            x *= 5
        return ans
        
