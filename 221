'''

Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example:

Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4

'''
class Solution(object):
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        dp[i][j]表示以ij为右下角的最大正方形的边长，i+1、j+1处的值可以由ij得到（i+1 j+1的值用m代替，ij的值用n代替）如果matrix在ij的值为0
        则m为1，如果不是的话，则n的值最多为m+1，可以查看边的伸展来确定。
        """
        if not matrix or not matrix[0]:
            return 0
        height,width = len(matrix),len(matrix[0])
        maxd = 0
        dp = [[0] * width for _ in range(height)]
        for i in range(height):
            for j in range(width):
                if i == 0 or j == 0:
                    dp[i][j] = int(matrix[i][j])
                    maxd = max(maxd,dp[i][j])
                    continue
                elif matrix[i][j] == "0":
                    dp[i][j] = 0
                    continue
                flag = 1
                for m in range(1,dp[i-1][j-1]+1):
                    if matrix[i-m][j] == "0" or matrix[i][j-m] == "0":
                        break
                    flag += 1
                dp[i][j] = flag
                maxd = max(maxd,dp[i][j])
        print(dp)
        return maxd**2

改进版1：size[i][j] = min(size[i - 1][j - 1], min(size[i - 1][j], size[i][j - 1])) + 1;
int maximalSquare(vector<vector<char>>& matrix) {
    int m = matrix.size();
    if (!m) return 0;
    int n = matrix[0].size();
    vector<vector<int> > size(m, vector<int>(n, 0));
    int maxsize = 0;
    for (int j = 0; j < n; j++) {
        size[0][j] = matrix[0][j] - '0';
        maxsize = max(maxsize, size[0][j]);
    }
    for (int i = 1; i < m; i++) {
        size[i][0] = matrix[i][0] - '0';
        maxsize = max(maxsize, size[i][0]);
    }
    for (int i = 1; i < m; i++) {
        for (int j = 1; j < n; j++) {
            if (matrix[i][j] == '1') {
                size[i][j] = min(size[i - 1][j - 1], min(size[i - 1][j], size[i][j - 1])) + 1;
                maxsize = max(maxsize, size[i][j]);
            }
        }
    }
    return maxsize * maxsize;
}
#改进版2:2个向量，分别遍历每一列，因为ij之和前面和上面2范围内的有联系，所以2列即可
int maximalSquare(vector<vector<char>>& matrix) {
	int m = matrix.size();
	if (!m) return 0;
	int n = matrix[0].size();
	vector<int> pre(m, 0);
	vector<int> cur(m, 0);
	int maxsize = 0;
	for (int i = 0; i < m; i++) {
		pre[i] = matrix[i][0] - '0';
		maxsize = max(maxsize, pre[i]);
	}
	for (int j = 1; j < n; j++) {
		cur[0] = matrix[0][j] - '0';
		maxsize = max(maxsize, cur[0]);
		for (int i = 1; i < m; i++) {
			if (matrix[i][j] == '1') {
				cur[i] = min(cur[i - 1], min(pre[i - 1], pre[i])) + 1;
				maxsize = max(maxsize, cur[i]);
			}
		}
		swap(pre, cur);
		fill(cur.begin(), cur.end(), 0);
	}
	return maxsize * maxsize;
}
Now you see the solution is finis


#改进版3，一个m+1维度向量，dp[i]表示，当遍历到第j列的时候，i-1，j处为右下角的三角形最大边长值，新的值为下一列的此处值，不断替换旧的列的值
pre保存的值为第dp[i]的旧值，这个在dp[i+1]的时候会用到，所以需要保存一次。不断反复即可，dp[0]用来应付第一行的值，最后的pre这会在每一次迭代
的第一行被重新更新，dp[i]的第一次赋值
int maximalSquare(vector<vector<char>>& matrix) {
    if (matrix.empty()) return 0;
    int m = matrix.size(), n = matrix[0].size();
    vector<int> dp(m + 1, 0);
    int maxsize = 0, pre = 0;
    for (int j = 0; j < n; j++) {
        for (int i = 1; i <= m; i++) {
            int temp = dp[i];
            if (matrix[i - 1][j] == '1') {
                dp[i] = min(dp[i], min(dp[i - 1], pre)) + 1;
                maxsize = max(maxsize, dp[i]);
            }
            else dp[i] = 0; 
            pre = temp;
        }
    }
    return maxsize * maxsize;
}

