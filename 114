'''
Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
# dfs,因为不能返回值，所以trans函数返回当前root的有序转化列的最后一个节点

class Solution(object):
    def trans(self,root):
        if root:
            a = self.trans(root.left)
            if a:
                a.right = root.right
                root.right = root.left
                root.left = None
            else:
                a = root
            b = self.trans(a.right)
            if b:
                return b
            else:
                return a
        return None
    
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        self.trans(root)
        
        
更好的方法（java）；
先变换右边，然后变换左边，不用返回值函数
  private TreeNode prev = null;

public void flatten(TreeNode root) {
    if (root == null)
        return;
    flatten(root.right);
    flatten(root.left);
    root.right = prev;
    root.left = null;
    prev = root;
}
