'''
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
'''
class Solution(object):
    def getmid(self,nums):
        a = len(nums)
        if a % 2 == 0:
            return (float(nums[a/2-1])+float(nums[a/2]))/2
        else:
            return float(nums[a/2])
        
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        if nums1 == [] and nums2 == []:
            return None
        elif nums1 == []:
            return self.getmid(nums2)
        elif nums2 == []:
            return self.getmid(nums1)
        if len(nums1) < len(nums2):
            nums1,nums2 = nums2,nums1
        while len(nums2) > 2:
            mid1 = self.getmid(nums1)
            mid2 = self.getmid(nums2)
            toremove = (len(nums2)-1)/2
            print(mid1,mid2,toremove)
            if mid1 == mid2:
                return mid1
            elif mid1 > mid2:
                nums1 = nums1[:-toremove]
                nums2 = nums2[toremove:]
            elif mid1 < mid2:
                nums1 = nums1[toremove:]
                nums2 = nums2[:-toremove]
            print(nums1,nums2)
        a = len(nums1)
        print(nums1,nums2,a)
        if len(nums2) == 1:    
            res1 = nums2[0]
            if a%2:
                if a == 1:
                    return float(nums1[0]+res1)/2
                res2,res3,res4 = nums1[a/2],nums1[a/2-1],nums1[a/2+1]
                print(res2,res3,res4)
                if res1 < res2:
                    return float(res2+max(res1,res3))/2
                elif res1 > res2:
                    return float(res2+min(res1,res4))/2
            else:
                res2,res3 = nums1[a/2-1],nums1[a/2]
                if res1 < res2:
                    return float(res2)
                elif res1 > res3:
                    return float(res3)
                return float(res1)
        else:
            n21,n22 = nums2[0],nums2[1]
            if len(nums1) % 2:
                n11,n12,n13 = nums1[a/2-1],nums1[a/2],nums1[a/2+1]
                if n22 < n12:
                    return float(max(n21,n22,n11))
                if n21 > n12:
                    return float(min(n21,n22,n13))
                return float(n12)
            else:
                if len(nums1) == 2:
                    xx = nums1+nums2
                    return float(sum(xx)-min(xx)-max(xx))/2
                else:
                    n11,n12,n13,n14 = nums1[a/2-2],nums1[a/2-1],nums1[a/2],nums1[a/2+1]
                    xx = [n11,n12,n13,n14,n22,n21]
                    xx.remove(max(xx))
                    xx.remove(min(xx))
                    return float(sum(xx)-min(xx)-max(xx))/2
                   
    def median(A, B):
      m, n = len(A), len(B)
      if m > n:
          A, B, m, n = B, A, n, m
      if n == 0:
          raise ValueError

      imin, imax, half_len = 0, m, (m + n + 1) / 2
      while imin <= imax:
          i = (imin + imax) / 2
          j = half_len - i
          if i < m and B[j-1] > A[i]:
              # i is too small, must increase it
              imin = i + 1
          elif i > 0 and A[i-1] > B[j]:
              # i is too big, must decrease it
              imax = i - 1
          else:
              # i is perfect

              if i == 0: max_of_left = B[j-1]
              elif j == 0: max_of_left = A[i-1]
              else: max_of_left = max(A[i-1], B[j-1])

              if (m + n) % 2 == 1:
                  return max_of_left

              if i == m: min_of_right = B[j]
              elif j == n: min_of_right = A[i]
              else: min_of_right = min(A[i], B[j])

              return (max_of_left + min_of_right) / 2.0
