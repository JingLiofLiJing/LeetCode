'''
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
'''
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        #两次2分查找分别逼近最左边和最右边，然后进行判断即可
        if not nums:
            return [-1,-1]
        start,end = 0,len(nums)-1
        while start <= end:
            mid = (start+end)/2
            if nums[mid] < target:
                start = mid + 1
            else:
                end = mid - 1
        a1 = start
        start,end = 0,len(nums)-1
        while start <= end:
            mid = (start+end)/2
            if nums[mid] > target:
                end = mid - 1
            else:
                start = mid + 1
        a2 = end
        print(a1,a2)
        if a1 >=0 and a1< len(nums) and a2 >=0 and a2< len(nums) and nums[a1] == target and nums[a2] == target:
            return [a1,a2]
        return [-1,-1]         

#优化解法，也是2次2分找两个边界
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if not nums:
            return [-1, -1]
        
        l, r = 0, len(nums) - 1
        res = [-1, -1]
        while(l < r):
            mid = (l + r) / 2
            if nums[mid] < target:
                l = mid + 1
            else:
                r = mid
        #判断左边界和是否有数字存在
        if nums[l] != target:
            return res
        else:
            res[0] = l

        r = len(nums) - 1
        while(l < r):
            mid = (l + r) / 2 + 1
            if nums[mid] > target:
                r = mid - 1
            else:
                l = mid
        #如果左边界存在右边界肯定存在
        res[1] = r

        return res
