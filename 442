'''
Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements that appear twice in this array.

Could you do it without extra space and in O(n) runtime?

Example:
Input:
[4,3,2,7,8,2,3,1]

Output:
[2,3]
#不断把当前下标的数字放到正确的位置上，最后再判断一次重复即可
'''
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
    	List<Integer> res = new ArrayList<Integer>();
        for(int i=0; i<nums.length;i++){
        	while(nums[nums[i]-1]!=nums[i]){
        		int tmp = nums[i];
        		nums[i] = nums[tmp-1];
        		nums[tmp-1] = tmp; 
        	}
            if(nums[i] != i+1 && !res.contains(nums[i])){
        		res.add(nums[i]);
        	}
        }
        // for(int i=0; i<nums.length;i++){
        // 	if(nums[i] != i+1 && !res.contains(nums[i])){
        // 		res.add(nums[i]);
        // 	}
        // }
        return res;
    }
    
}
