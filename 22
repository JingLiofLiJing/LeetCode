'''
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
'''
class Solution(object):
    def pro(self,dict,n,m):
        if n == 0:
            return set('('+xx+')'  for xx in dict[m-1])
        else:
            return set(x+y for x in dict[n] for y in dict[m])

    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        用字典保存之间的运算结果，在大的n情况下直接使用前面的进行叠加，比较耗费空间复杂度，时间复杂度n2
        """
        dict = {0:[""],1:["()"]}
        for i in range(2,n+1):
            dict[i] = set()
            for j in range(i):
                # xx = self.pro(dict,j,i-j)
                dict[i] |= self.pro(dict,j,i-j)
        return list(dict[n])
        
        
class Solution(object):
    def pro(self,res,lst,left,right,mmax):
        if len(lst) == 2*mmax:
            res.append(lst)
        #尝试先加（
        if left < mmax:
            self.pro(res,lst+"(",left+1,right,mmax)
        #尝试加），但是数量最多和（的相同
        if right < left:
            self.pro(res,lst+")",left,right+1,mmax)
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        res = []
        #最终结果，中间字符串，（的个数，）的个数，总的个数限制
        self.pro(res,"",0,0,n)
        return res
