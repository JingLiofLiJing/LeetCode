'''
Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
'''
class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.lst = []

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: void
        """
        self.lst.append(x)
        for i in range(len(self.lst)-1,0,-1):
            self.lst[i] = self.lst[i-1]
        self.lst[0] = x
        

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        if len(self.lst) == 0:
            return None
        a = self.lst[0]
        del self.lst[0]
        return a

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        if len(self.lst) == 0:
            return None
        return self.lst[0]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        return len(self.lst) == 0
        


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()




class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.s1 = []
        self.s2 = []

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: void
        """
        if self.s2 == []:
            self.s1.append(x)
        else:
            self.s2.append(x)

    def haha(self,x,y):
        while len(x) > 1:
			y.append(x.pop(0))
        return x.pop()
    
    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        if self.s1 == [] and self.s2 == []:
            return None
        if self.s1 == []:
            return self.haha(self.s2,self.s1)
        else:
            return self.haha(self.s1,self.s2)

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        if self.s1 == [] and self.s2==[]:
            return None
        elif self.s1 == []:
            return self.s2[-1]
        else:
            return self.s1[-1]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        return self.s1 == [] and self.s2==[]
