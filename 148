'''
Sort a linked list in O(n log n) time using constant space complexity.
Example 1:
Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5
'''
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def merge(self,n1,n2):
        start = ListNode(0)
        flag,temp = 0,start
        while n1 and n2:
            if n1.val <= n2.val:
                pnext = n1
                n1 = n1.next
            else:
                pnext = n2
                n2 = n2.next
            pnext.next = None
            if flag == 0:
                temp.val = pnext.val
                flag = 1
            else:
                temp.next = pnext
                temp = temp.next
        if n1!= None:
            temp.next = n1
        else:
            temp.next = n2
        return start
            
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        #归并排序，首先每次分一半进行排序，进行logn次，然后每一次合并为o（n），所以为nlogn
        """
        #如果链表少于2个节点不用比较直接返回
        if not head or not head.next:
            return head
        prev,mid,pnext = None,head,head
        while pnext and pnext.next:
            prev= mid
            mid = mid.next
            pnext = pnext.next.next
        #以prev为间隔隔开
        prev.next = None
        node1 = self.sortList(head)
        node2 = self.sortList(mid)
        return self.merge(node1,node2)
    
