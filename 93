class Solution(object):
    def haha(self, lst, i, tmp, res, mlen):
        #3个分割点已经找到
        if len(tmp) == 3:
            #最后还剩几位数
            gap = mlen - i
            if gap == 1 or (gap>1 and gap <4 and lst[i] != "0" and int(lst[i:])<=255):
                start = 0
                xxx = ""
                for m in tmp:
                    xxx += lst[start:m]+"."
                    start = m
                res.append(xxx+lst[tmp[-1]:])
            return
        #前面的情况遍历完整个str但分隔数不够
        if i == mlen and len(tmp) < 3:
            return
        for j in range(min(3,mlen-i)):
            #分别以1位2位3位进行分割
            xx = i+j+1
            hmb = int(lst[i:xx])
            if hmb > 255:
                break
            tmp.append(i + j + 1)
            self.haha(lst, xx, tmp, res, mlen)
            tmp.pop(-1)
            #如果第一个为0，则不用遍历后面，不满足情况
            if j == 0 and lst[i] == "0":
                break

    def restoreIpAddresses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        #res:结果数组,tmp:分隔下标（分割点的下一个位置，比如第一个点分隔就是1）
        res = []
        tmp = []
        mlen = len(s)
        if len(s) > 3 and len(s) <= 12:
            self.haha(s, 0, tmp, res, mlen)
        print(res)
        return res
