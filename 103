'''
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def search(self,root,res,level):
        if not root:
            return 
        if level > len(res):
            res.append([])
        if level%2 == 0:
            #双数层顺序相反
            res[level-1] = [root.val] + res[level-1]
        else:
            res[level-1] += [root.val] 
        self.search(root.left,res,level+1)
        self.search(root.right,res,level+1)
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        flag = 0
        if root:
            self.search(root,res,1)
        return res
