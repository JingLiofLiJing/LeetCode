'''

A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, these are arithmetic sequence:

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic.

1, 1, 2, 5, 7

A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 <= P < Q < N.

A slice (P, Q) of array A is called arithmetic if the sequence:
A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.

The function should return the number of arithmetic slices in the array A.


Example:

A = [1, 2, 3, 4]

return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.
dp存相邻序列的差，第一轮[1,2]，[2,3]的差，第二轮[1,2,3]的差，如果差不一样则为int最大值，一直到最大值即可

'''
class Solution {
    public int numberOfArithmeticSlices(int[] A) {
    	int mlen = A.length;
    	int res = 0;
    	if(mlen < 3) return 0;
    	int[] dp = new int[mlen-1];
    	for(int i=0;i<mlen-1;++i){
    		dp[i] = A[i+1]-A[i];
    	}
    	while(dp.length >= 2){
    		int[] temp = new int[dp.length-1];
    		int flag = 0;
    		for(int i = 0;i<temp.length;i++){
    			if(dp[i] == dp[i+1] && dp[i]!=Integer.MAX_VALUE){
    				res += 1;
    				temp[i] = dp[i];
    				flag = 1;
    			}
    			else{
    				temp[i] = Integer.MAX_VALUE;
    			}
    		}
    		if(flag == 0) break;
    		dp = temp;
    	}
		return res;
    }
}



吊炸天的方法
public int numberOfArithmeticSlices(int[] A) {
    int curr = 0, sum = 0;
    for (int i=2; i<A.length; i++)
        #如果存在连续的3元组相等，则相当于加上等差数列，比如有3组连续的相等，则加上3+2+1分别表示3元组，4元组和5元组的数量，
        每一个比前一个少1即可。
        if (A[i]-A[i-1] == A[i-1]-A[i-2]) {
            curr += 1;
            sum += curr;
        } else {
            curr = 0;
        }
    return sum;
}
