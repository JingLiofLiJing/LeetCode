'''
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.

'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
'''
深度优先搜索，当前节点递归遍历左右子节点，空节点默认返回True和None，None，表示此节点左子树是否满足搜索树条件并且
此节点左边子树的最小值和最大值，以及此节点右子树是否满足搜索树条件并且此节点右边子树的最小值和最大值，然后两边的
极值和本子节点的值进行判断递归向上即可。
'''
class Solution(object):
    def check(self, lst):
        lst = [i for i in lst if i != None]
        for i in range(len(lst) - 1):
            if lst[i] >= lst[i + 1]:
                return False
        return True

    def haha(self, node):
        if not node:
            return True, None, None
        mval = node.val
        status1, lmin, lmax = self.haha(node.left)
        if not status1:
            return False, None, None
        status2, rmin, rmax = self.haha(node.right)
        if not status2:
            return False, None, None
        # print(lmin,lmax,mval,rmin,rmax)
        lst = [lmin, lmax, mval,rmin, rmax]
        print(len(lst))
        if self.check(lst[1:4]):
            lst = [i for i in lst if i != None]
            return True, min(lst), max(lst)
        return False, None, None

    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.haha(root)[0]


优化版本：不断检测左子树和右子树是否在最大的界中，如果的话，分隔界并递归判断
import sys
MAXI,MINI = sys.maxint, -sys.maxint-1
class Solution(object):
    def check(self,node,mind,maxd):
        if not node:
            return True
        if node.val <= mind or node.val >= maxd:
            return False
        return self.check(node.left,mind,node.val) and self.check(node.right,node.val,maxd)
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.check(root,MINI,MAXI)
