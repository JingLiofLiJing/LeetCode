'''
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:
Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]
'''
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if len(prices) < 1:
            return 0
        #考虑3个状态，形成状态机方程
        #s0：rset之后的状态，s1：买完之后的状态，s2：卖了之后的状态
        #s0 -> 买 -> s1 -> 卖 -> s2 -> rset -> s0
        #s0和s1可以一直rset
        s0 = [0 for i in range(len(prices))]
        s1 = [0 for i in range(len(prices))]
        s2 = [0 for i in range(len(prices))]
        s0[0],s1[0],s2[0] = 0,-prices[0],-10e9
        for i in range(1,len(prices)):
            s0[i] = max(s0[i-1],s2[i-1])
            s1[i] = max(s1[i-1],s0[i-1]-prices[i])
            s2[i] = s1[i-1]+prices[i]
        return max(s0[-1],s2[-1])
