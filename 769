'''
Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of "chunks" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:

Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.
Example 2:

Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].
However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.
Note:

arr will have length in range [1, 10].
arr[i] will be a permutation of [0, 1, ..., arr.length - 1].
题目已经假设了可以倒转回递增的序列，所以设置一个maxd数组求前面n个数的最大值，如果当前的max值大于下标，说明前面的需要在
一个替换块里，直到最大值等于下标后则进行调转一定会使得前面的满足递增。
'''
class Solution(object):
    def maxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        mlen = len(arr)
        maxd = [0]*mlen
        maxd[0] = -1
        res = 0
        for i in range(mlen):
            maxd[i] = max(maxd[i-1],arr[i])
            if maxd[i] == i:
                res += 1
        return res
        
