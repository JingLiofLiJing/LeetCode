'''

Given an unsorted array of integers, find the length of longest increasing subsequence.
Example:
Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
'''
class Solution(object):
    def findindex(self,lst,i,j,val):
        start,end = i,j
        while start < end:
            mid = (start + end)/2
            if lst[mid] < val:
                start += 1
            else:
                end = mid
        return start
            
            
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        第一种方法：dp[i]表示长度为i+1的子序列（i从0开始，长度从1开始）中最后一个数最小是多少，这样用mlen记录添加进去后的长度遍历完就是
        最长递增子串的长度。每当遍历一个数字的时候，寻找这个数字在dp已经填入的数的位置，如果是最后一个则加到后面并且mlen+1，否则在原来位置
        上的值取最小，这样目前遍历到的长度的子串中记录最小的最后一个数的话可以更直接记录得到的更加长的数组。
        """
        if not nums:
            return 0
        dp = [0]*len(nums)
        mlen = 0
        for num in nums:
            ind = self.findindex(dp,0,mlen,num)
            if ind == mlen:
                dp[ind] = num
                mlen += 1
            else:
                dp[ind] = min(dp[ind],num)
        return mlen


n2写法
class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        dp为当前数字结尾的最大子串长度，所以算j的时候需要遍历0到j-1的所有结尾子串长度选出最大值进行填补
        """
        if not nums:
            return 0
        dp = [1]*len(nums)
        mlen = len(nums)
        for i in range(1,mlen):
            maxd = 0
            for j in range(i):
                if nums[j] < nums[i]:
                    maxd = max(maxd,dp[j])
            dp[i] += maxd
        return max(dp)
