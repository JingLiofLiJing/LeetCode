小青蛙有一天不小心落入了一个地下迷宫,小青蛙希望用自己仅剩的体力值P跳出这个地下迷宫。为了让问题简单,假设这是一个n*m的格子迷宫,迷宫每个位置为0或者1,0代表这个位置有障碍物,小青蛙达到不了这个位置;1代表小青蛙可以达到的位置。小青蛙初始在(0,0)位置,地下迷宫的出口在(0,m-1)(保证这两个位置都是1,并且保证一定有起点到终点可达的路径),小青蛙在迷宫中水平移动一个单位距离需要消耗1点体力值,向上爬一个单位距离需要消耗3个单位的体力值,向下移动不消耗体力值,当小青蛙的体力值等于0的时候还没有到达出口,小青蛙将无法逃离迷宫。现在需要你帮助小青蛙计算出能否用仅剩的体力值跳出迷宫(即达到(0,m-1)位置)。 
输入描述:
输入包括n+1行:
 第一行为三个整数n,m(3 <= m,n <= 10),P(1 <= P <= 100)
 接下来的n行:
 每行m个0或者1,以空格分隔
 lizi:
10 10    
1 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 1
1 1 1 1 0 0 0 0 0 1
1 0 0 1 0 0 0 0 0 1
1 0 0 1 0 0 0 0 0 1
1 0 0 1 1 1 1 1 1 1
1 0 0 1 0 0 0 0 0 1
1 0 0 1 1 1 1 1 1 1
1 0 0 1 0 0 0 0 0 1
1 0 0 1 1 1 1 1 1 1
[0,0],[1,0],[2,0],[2,1],[2,2],[2,3],[3,3],[4,3],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[4,9],[3,9],[2,9],[1,9],[0,9]
n,m,p = [int(i) for i in raw_input().strip().split()]
c = [[int(i) for i in raw_input().strip().split()] for _ in range(m)]
used = [[0]*m for i in range(n)]
path,bestp,bestpath = [],-1,None

def search(p,i,j):
    global bestpath,bestp
    if i < 0 or i >= n or j < 0 or j >= m or p < 0 or c[i][j] == 0 or used[i][j] == 1:
        return False
    path.append([i,j])
    used[i][j] = 1
    if i == 0 and j == m-1 and p >= 0:
        if p > bestp:
            bestp = p
            bestpath = path[:]
    else:
        search(p-1,i,j-1)
        search(p-1,i,j+1)
        search(p-3,i-1,j)
        search(p,i+1,j)
    used[i][j] = 0
    path.pop(-1)
    
search(p,0,0)
if bestpath:
    print ','.join( ['['+str(a)+','+str(b)+']' for a,b in bestpath])
else:
    print "Can not escape!"
